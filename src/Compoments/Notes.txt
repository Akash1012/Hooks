Usecallback and usememo 
-------------------------------
The main difference between the two is that ‘useCallback’ returns a memoized callback and
‘useMemo’ returns a memoized value that is the result of the function parameter.

If you have to process a lot of data, ‘useMemo’ is the perfect Hook as it will do the work once at the first render
and then return a cached version on every other render.

‘useCallback’, however, is used differently. Take for example a parent component that often re-renders.
Inside the parent, we have a child component that takes a function-prop. At each re-render, the Child will 
re-execute its function prop uselessly. However, if you pass ‘useCallback’ as a prop with a dependency array,
it resolves the issue because the function will be executed only when the dependency changes. Every other re-render
will then get a cached function.